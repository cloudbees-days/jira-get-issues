apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: jira-get-issues
description: "Get Jira issues using JQL query"
inputs:
  jira-url:
    description: "Jira instance URL (e.g., https://your-domain.atlassian.net)"
    required: true
  jira-username:
    description: "Jira username or email address"
    required: true
  jira-token:
    description: "Jira API token"
    required: true
  jql:
    description: "JQL query to filter issues"
    required: true
  max-results:
    description: "Maximum number of results to return"
    default: "50"
    required: false
  fields:
    description: "Comma-separated list of fields to return (default: all)"
    required: false
  start-at:
    description: "Index of the first issue to return (for pagination)"
    default: "0"
    required: false

outputs:
  issues:
    value: ${{ steps.get-issues.outputs.issues }}
    description: "JSON array of issues returned by the query"
  total:
    value: ${{ steps.get-issues.outputs.total }}
    description: "Total number of issues matching the query"
  count:
    value: ${{ steps.get-issues.outputs.count }}
    description: "Number of issues returned in this response"

runs:
  using: composite
  steps:
    - id: get-issues
      name: Get Jira Issues
      uses: docker://alpine:3.22
      shell: sh
      run: |
        set -e

        # Install required tools
        apk add --no-cache curl jq

        # Validate inputs
        if [ -z "${{ inputs.jira-url }}" ]; then
          echo "Error: jira-url is required"
          exit 1
        fi

        if [ -z "${{ inputs.jira-username }}" ]; then
          echo "Error: jira-username is required"
          exit 1
        fi

        if [ -z "${{ inputs.jira-token }}" ]; then
          echo "Error: jira-token is required"
          exit 1
        fi

        if [ -z "${{ inputs.jql }}" ]; then
          echo "Error: jql is required"
          exit 1
        fi

        # Clean up URL (remove trailing slash if present)
        JIRA_URL="${{ inputs.jira-url }}"
        JIRA_URL="${JIRA_URL%/}"

        # Prepare API endpoint
        API_URL="${JIRA_URL}/rest/api/3/search"

        # Build query parameters
        QUERY_PARAMS="jql=$(echo '${{ inputs.jql }}' | sed 's/ /%20/g')"
        QUERY_PARAMS="${QUERY_PARAMS}&maxResults=${{ inputs.max-results }}"
        QUERY_PARAMS="${QUERY_PARAMS}&startAt=${{ inputs.start-at }}"

        # Add fields parameter if specified
        if [ -n "${{ inputs.fields }}" ]; then
          FIELDS=$(echo "${{ inputs.fields }}" | sed 's/ //g')
          QUERY_PARAMS="${QUERY_PARAMS}&fields=${FIELDS}"
        fi

        echo "Executing JQL query: ${{ inputs.jql }}"
        echo "API URL: ${API_URL}?${QUERY_PARAMS}"

        # Make API request
        RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
          -X GET \
          -H "Accept: application/json" \
          -u "${{ inputs.jira-username }}:${{ inputs.jira-token }}" \
          "${API_URL}?${QUERY_PARAMS}")

        # Extract HTTP status code
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1 | sed 's/.*HTTP_STATUS://')
        RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')

        # Check for successful response
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Error: API request failed with status $HTTP_STATUS"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi

        # Validate JSON response
        if ! echo "$RESPONSE_BODY" | jq . > /dev/null 2>&1; then
          echo "Error: Invalid JSON response from Jira API"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi

        # Extract results
        ISSUES=$(echo "$RESPONSE_BODY" | jq -c '.issues')
        TOTAL=$(echo "$RESPONSE_BODY" | jq -r '.total // 0')
        COUNT=$(echo "$RESPONSE_BODY" | jq -r '.issues | length')

        echo "Found $COUNT issues out of $TOTAL total matching the query"

        # Set outputs
        echo "$ISSUES" > "$CLOUDBEES_OUTPUTS/issues"
        echo "$TOTAL" > "$CLOUDBEES_OUTPUTS/total"
        echo "$COUNT" > "$CLOUDBEES_OUTPUTS/count"

        # Optional: Pretty print first few issue keys for logging
        if [ "$COUNT" -gt 0 ]; then
          echo "Issue keys:"
          echo "$ISSUES" | jq -r '.[0:5] | .[] | .key' | sed 's/^/  - /'
          if [ "$COUNT" -gt 5 ]; then
            echo "  ... and $(($COUNT - 5)) more"
          fi
        fi
